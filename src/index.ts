import { app, BrowserWindow, Tray, nativeImage, Menu, clipboard } from 'electron';
import { getDanmaku } from './getDanmaku';
import { LiveTCP } from 'bilibili-live-ws';
import { MSGBase } from './parseMSG';
import log from 'electron-log';
import appConfig from './config';
import path from 'path';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow | null = null
let tray: Tray | null = null
let liveClient: LiveTCP | null = null
let messageList: MSGBase[] = []
let sendInterval: NodeJS.Timeout | null = null
const INTERVAL = 1000 // 刷新列表到渲染进程的间隔
let ignoreMouseEvents = true // 是否忽略鼠标事件
let showArea = false // 是否显示区域
let isMaximized = false // 是否最大化
let firstSizeSetting = true // 是否是第一次修改/固定区域，如果是则把区域缩小

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    transparent: true,
    frame: false,
    alwaysOnTop: true,
  });

  const iconPath = path.join(__dirname, 'assets', 'icon.png')
  log.debug(`iconPath: ${iconPath}`)
  tray = new Tray(nativeImage.createFromPath(iconPath))
  const contextMenu = Menu.buildFromTemplate([
    {
      label: '修改/固定区域', click: () => {
        // 设置窗口是否显示区域
        showArea = !showArea
        if (showArea) {
          mainWindow?.webContents.send('showArea')
          log.debug('showArea')
          if (firstSizeSetting) {
            mainWindow?.setSize(400, 400)
            firstSizeSetting = false
          }
        }
        else {
          mainWindow?.webContents.send('hideArea')
          log.debug('hideArea')
        }
        // 设置窗口是否忽略鼠标事件
        ignoreMouseEvents = !ignoreMouseEvents
        mainWindow?.setIgnoreMouseEvents(ignoreMouseEvents)
        log.debug(`ignoreMouseEvents: ${ignoreMouseEvents}`)
      }
    },
    {
      label: '最大化', click: () => {
        isMaximized = !isMaximized
        if (!isMaximized) {
          mainWindow?.unmaximize()
        }
        else {
          mainWindow?.maximize()
        }
      }
    },
    {
      label: '复制配置文件路径', click: () => {
        clipboard.writeText(appConfig.CONFIGFILEPATH)
      }
    },
    {
      label: '复制日志路径', click: () => {
        clipboard.writeText(log.transports.file.getFile().path)
      }
    },
    {
      label: '退出', click: () => {
        app.quit()
      }
    }
  ])
  tray.setContextMenu(contextMenu);

  mainWindow.maximize();
  mainWindow.setIgnoreMouseEvents(true);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

const createLive = () => {
  getDanmaku(messageList).then((retLiveClient) => {
    liveClient = retLiveClient
  })
  sendInterval = setInterval(() => {
    // 定时将消息列表发送到渲染进程
    const size = messageList.length
    mainWindow?.webContents.send('sendMessageListToRender', messageList.splice(0, size))
  }, INTERVAL)
}

const closeLive = () => {
  if (liveClient) {
    liveClient.close()
    liveClient = null
  }
  if (sendInterval) {
    clearInterval(sendInterval)
  }
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow()
  createLive()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  closeLive()
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on('before-quit', () => {
  tray.destroy();
});