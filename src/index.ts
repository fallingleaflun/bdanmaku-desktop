import { app, BrowserWindow, Tray, nativeImage, Menu } from 'electron';
import { getDanmaku } from './getDanmaku';
import { LiveTCP } from 'bilibili-live-ws';
import { MSGBase } from './parseMSG';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow | null = null
let tray: Tray | null = null
let liveClient: LiveTCP | null = null
let messageList: MSGBase[] = []
let sendInterval: NodeJS.Timeout | null = null
const INTERVAL = 1000 // 刷新列表到渲染进程的间隔

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    transparent: true,
    frame: false,
    alwaysOnTop: true,
  });

  mainWindow.maximize();
  mainWindow.setIgnoreMouseEvents(true)

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  // // 托盘
  // const trayIcon = nativeImage.createFromPath('./src/assets/icon.png')
  // tray = new Tray(trayIcon)
  // const contextMenu = Menu.buildFromTemplate([
  //   { label: 'Show', click: () => mainWindow.show() },
  //   { label: '退出', click: () => app.quit() }
  // ])
  // tray.setContextMenu(contextMenu)
};

const createLive = () => {
  getDanmaku(messageList).then((retLiveClient) => {
    liveClient = retLiveClient
  })
  sendInterval = setInterval(() => {
    // 定时将消息列表发送到渲染进程
    const size = messageList.length
    mainWindow?.webContents.send('sendMessageListToRender', messageList.splice(0, size))
  }, INTERVAL)
}

const closeLive = () => {
  liveClient.close()
  liveClient = null
  clearInterval(sendInterval)
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow()
  createLive()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  closeLive()
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
